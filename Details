# Digital Defamation Evidence Suite (DDES)

A Python Toolkit for Tracking, Quantifying, and Reporting Online Defamation
Purpose: A structured framework for analyzing the financial and reputational impacts of online defamation cases under GDPR and UK Defamation Law.
Author: Pippa von Berg

üìö Imports & Libraries
 
import hashlib  # For generating fingerprints
import datetime  # For timestamps and logs
import json  # For storing offender logs and reports
import os  # For file operations

Explanation:

hashlib: Used to create a digital "fingerprint" for content using hashing algorithms.
datetime: Adds timestamps to logs and reports for traceability.
json: Stores offender details and reports in structured JSON files.
os: Checks if files exist and manages file operations.

‚öôÔ∏è 1. Trace Origin
 
def trace_origin(source_url):
    """
    Trace the origin of harmful or defamatory content.
    Args:
        source_url (str): The URL of the defamatory content.
    Returns:
        dict: Metadata about the content's origin.
    """
    print("[INFO] Tracing origin of content...")

    # Simulate tracing metadata (this would be more complex in reality)
    origin_metadata = {
        "source_url": source_url,
        "traced_ip": "192.168.1.100",  # Placeholder IP address
        "server_location": "London, UK",
        "timestamp": datetime.datetime.now().isoformat(),
        "content_id": hashlib.sha256(source_url.encode()).hexdigest()
    }
    return origin_metadata

Explanation:

This function takes a URL (or a similar source identifier) and simulates tracing where the content came from.
hashlib.sha256 creates a unique ID for the content.
Metadata includes an IP address, server location, and timestamp.
In a real-world setting, this might involve querying databases or APIs.

‚öôÔ∏è 2. Generate Fingerprint

def fingerprint_content(content_metadata):
    """
    Generate a unique digital fingerprint for content.
    Args:
        content_metadata (dict): Metadata returned by trace_origin.
    Returns:
        str: Unique fingerprint hash.
    """
    print("[INFO] Generating digital fingerprint...")

    # Combine source URL and timestamp to create a unique identifier
    fingerprint_base = f"{content_metadata['source_url']}{content_metadata['timestamp']}"
    fingerprint = hashlib.sha256(fingerprint_base.encode()).hexdigest()
    return fingerprint

Explanation:

A digital fingerprint ensures the content can be uniquely identified, even if slightly modified.
It combines the URL and timestamp to generate a cryptographic hash.
This makes it nearly impossible to fake or alter the content without detection.

‚öôÔ∏è 3. Calculate Financial Damages
 
def calculate_damage(financial_losses):
    """
    Estimate financial damage caused by defamation.
    Args:
        financial_losses (list): A list of estimated financial damages (¬£).
    Returns:
        float: Total estimated damages.
    """
    print("[INFO] Calculating financial damages...")

    if not financial_losses:
        return 0.0

    total_damage = sum(financial_losses)
    penalty = total_damage * 0.15  # Example penalty multiplier for punitive damages
    return round(total_damage + penalty, 2)
Explanation:

Accepts a list of financial damage values (e.g., lost revenue, legal costs).
Adds them together and applies a 15% penalty multiplier to reflect additional punitive damages.
The round function ensures clean financial figures (e.g., ¬£1234.56).

‚öôÔ∏è 4. Log Offender Details
 
def log_offender(username, fingerprint, violation_type="Defamation"):
    """
    Log offender information into a structured file.
    Args:
        username (str): Offender's username.
        fingerprint (str): Content fingerprint.
        violation_type (str): Type of violation.
    Returns:
        bool: True if successfully logged.
    """
    print("[INFO] Logging offender information...")

    offender_data = {
        "username": username,
        "fingerprint": fingerprint,
        "violation_type": violation_type,
        "log_timestamp": datetime.datetime.now().isoformat()
    }

    log_file = "offender_logs.json"

    if not os.path.exists(log_file):
        with open(log_file, 'w') as file:
            json.dump([], file)  # Create an empty list if file doesn't exist

    with open(log_file, 'r+') as file:
        logs = json.load(file)
        logs.append(offender_data)
        file.seek(0)
        json.dump(logs, file, indent=4)

    return True

Explanation:

This logs offender details (username, fingerprint, timestamp) into a JSON file.
If the file doesn‚Äôt exist, it creates one.
Adds each offender entry to the JSON list.
Logs are structured and time-stamped.

‚öôÔ∏è 5. Generate Final Report
 
def generate_report(origin_data, fingerprint, damages, offender_username):
    """
    Generate a structured court-ready report.
    Args:
        origin_data (dict): Metadata from trace_origin.
        fingerprint (str): Content fingerprint.
        damages (float): Total damage estimate.
        offender_username (str): Offender's username.
    Returns:
        str: File path of the report.
    """
    print("[INFO] Generating court-ready report...")

    report_data = {
        "generated_on": datetime.datetime.now().isoformat(),
        "origin_data": origin_data,
        "fingerprint": fingerprint,
        "estimated_damages": f"¬£{damages}",
        "offender": offender_username
    }

    report_path = "court_ready_report.json"
    with open(report_path, 'w') as file:
        json.dump(report_data, file, indent=4)

    return report_path
Explanation:

Consolidates all findings (origin, fingerprint, damages, offender info).
Saves everything in a JSON report.
This can be reviewed or presented in legal settings.

üöÄ Main Workflow
 
def main():
    try:
        source = "https://example.com/defamatory-post"
        origin_data = trace_origin(source)
        print("Origin traced:", origin_data)

        fingerprint = fingerprint_content(origin_data)
        print("Fingerprint generated:", fingerprint)

        damages = calculate_damage([1500, 3200, 2100])
        print(f"Estimated damages: ¬£{damages}")

        log_offender("offender_user", fingerprint)
        print("Offender logged successfully.")

        report_path = generate_report(origin_data, fingerprint, damages, "offender_user")
        print(f"Report generated at: {report_path}")

    except Exception as e:
        print(f"[ERROR]: {e}")


if __name__ == "__main__":
    main()

üìë Notes:

Data is logged in offender_logs.json.
Reports are saved as court_ready_report.json.
Basic error handling is included.
